Deploying Spring Boot on AWS EKS (Elastic Kubernetes Service )
==============================================================
AWS EKS provides a scalable and managed Kubernetes service and that allowing us to easily deploy, manage and scale containarized applications using Kubernetes

Steps:
1. Create Spring Boot Application  /welcome
2. Create Docker Image
3. Push Image to Elastic Container Registry
4. Pull Image from ECR and deploy into Kubernetes -EKS

Spring Boot   ---> Docker --->  AWS ECR (Container Registry) ---> EKS Kubernetes


AWS Account - AWS CLI , Kubectl, eksctl -- Docker

1) GET /welcome
pom.xml
<build>
 <finalName>sb-eks</finalName>

2) maven package

--- create docker image ---
3) Dockerfile
FROM openjdk:17
ADD target/sb-eks.jar sb-eks.jar
EXPOSE 8080
ENTRYPOINT ["java","-jar","springboot-eks.jar"]

4) create docker image
docker build -t sb-eks .

5) push docker image to ECR - Elastic Container Registry - Amazon Elastic Container Registry (ECR) is a fully managed container registry that makes it easy to store, manage, share, and deploy your container images and artifacts anywhere.

- login to AWS console
- services > Elastic Container Registry 
  Create a repository  - "Create"

Repository name: ...../sb-eks

Visibility settings: Private
> Create

URI: 768121720918.dkr.ecr.us-east-1.amazonaws.com/sb-eks

-- need to push our Docker image to this repository ----
 --> View push commands
[[Download & Install AWS CLI]]

cmd>aws configure
Access Key: AKIA3FV47KBLNDHTREFP
Secret Access Key: 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
Default Region Name: Global
Default Output format: json

cmd> aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 768121720918.dkr.ecr.us-east-1.amazonaws.com

Build the docker image - if it is not already done - docker build -t sb-eks .

After the build completes, tag your image so you can push the image to this repository:
cmd> docker tag sb-eks:latest 768121720918.dkr.ecr.us-east-1.amazonaws.com/sb-eks:latest

Push the image to the newly created AWS repository:
cmd> docker push 768121720918.dkr.ecr.us-east-1.amazonaws.com/sb-eks:latest

Copy URI: 768121720918.dkr.ecr.us-east-1.amazonaws.com/sb-eks:latest   (for reference)


Step - 4: pull Image from ECR and deploy into EKS
(a) setup of EKS to pull image from ECR 

=>  Create Cluster in EKS  can do it through "eksctl" tool also
Services  > EKS (Elastic Kubernetes Service) -> Create Cluster (Add Cluster)

-- using eksctl ---
cmd> eksctl create cluster --name sb-eks-cluster --version 1.29 --nodes=1 --node-type=t2.small --region us-east-1
 (takes around 12 - 15 minutes)

Refresh AWS Console - click on the created Cluster and can see all configurations

Next we need to update our local "kubeconfig" file with the cluster ; so that it provides the necessary settings to connect from our local system to this cluster

cmd> aws eks --region us-east-1 update-kubeconfig --name sb-eks-cluster

Response: Added new context arn:aws:eks:us-east-1:768121720918:cluster/sb-eks-cluster to C:\Users\Sunil Joseph\.kube\config

Our cluster is up and running 
Next step is to - deploy the application to Kubernetes Cluster which is EKS

=> to deploy any application to K8s we need 2 things
    (i) Deployment object
   (ii) Service object
and these 2 objects we create by using YML configuration

=> in application we specify the configuration to tell to the Kubernetes - what is the image that we need to deploy to the cluster and which type of service you want to expose

=> create a new file with name "k8s.yaml"  - to specify the deployment and service specific specifications

apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
spec:
  replicas: 3
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      containers:
        - name: myapp
          image: 768121720918.dkr.ecr.us-east-1.amazonaws.com/sb-eks
          ports:
            - containerPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: myapp-service
spec:
  selector:
    app: myapp
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: LoadBalancer


sb-docker-cloud> kubectl apply -f k8s.yaml

Response:
deployment.apps/myapp created
service/myapp-service created

== to validate
cmd> kubectl get svc   (service)

will display the service name, loadbalancer as type and external IP using which we can access our application


=> no of pods we defined is 3 (replicas: 3) - to validate it
cmd> kubectl get pods
 3 pods will be running

=> how to access our application
cmd> kubectl get svc
copy the url and paste it in browser - whitelabel error
provide the endpoint

http://ab8636479d31b4c20b771e0ee365a82e-1750019997.us-east-2.elb.amazonaws.com/welcome


Check "loadbalancer" services


Delete Cluster 
cmd> eksctl delete cluster sb-eks-cluster


Reference: https://docs.aws.amazon.com/eks/latest/userguide/getting-started.htmls
================================
