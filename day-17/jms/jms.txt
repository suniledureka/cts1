JMS(Java Message Service)
=========================

https://medium.com/@gaganjain9319/jms-java-message-service-detailed-explanation-50bc5ba6e3ef


Java Message Service (JMS) is a Java-based messaging API for creating, sending, receiving, and reading messages between two or more clients in a distributed computing environment.

JMS is a standard specification that defines a set of interfaces and protocols for reliable and asynchronous messaging. It provides a way for applications to communicate with each other without knowing the details of the underlying communication protocols, such as TCP/IP or HTTP.

JMS provides a standard way for clients to create, send, receive, and read messages, regardless of the messaging style used.

1. Messaging Models: JMS supports two messaging models, Publish-Subscribe and Point-to-Point. 
In Publish-Subscribe, messages are broadcasted to multiple subscribers, while in Point-to-Point, messages are delivered to only one receiver.

Point-to-Point Messaging Model: Point-to-point (P2P) is one of the two messaging models supported by JMS (Java Message Service). In a P2P messaging model, messages are sent from a single sender to a single receiver. The sender creates a message, and sends it to a specific queue, which is then consumed by a single receiver.

How P2P messaging works in JMS:

1. Sender creates a message: The sender creates a JMS message and sends it to a specific queue. The message contains the information that the sender wants to send to the receiver.
    
2. Receiver creates a message consumer: The receiver creates a message consumer for the queue that the sender has sent the message to. The message consumer listens for messages on the queue.
    
3. Sender sends the message: The sender sends the message to the specific queue using a JMS producer. The message is added to the end of the queue.
    
4. Receiver receives the message: The message consumer on the receiver side listens for messages on the queue. When a message is available on the queue, the message consumer retrieves it from the queue and sends it to the receiver.
    
5. Message acknowledgement: Once the message has been successfully received and processed by the receiver, the receiver can send an acknowledgement message to the sender to indicate that the message has been successfully received.


2. Publish-subscribe Messaging Model: Publish-subscribe (pub-sub) is one of the two messaging models supported by JMS (Java Message Service). In a pub-sub messaging model, messages are sent from a single sender to multiple receivers. The sender creates a message and publishes it to a specific topic, which can be consumed by multiple subscribers.


How pub-sub messaging works in JMS:

1. Sender creates a message: The sender creates a JMS message and publishes it to a specific topic. The message contains the information that the sender wants to send to multiple receivers.
    
2. Receiver creates a message consumer: Each receiver creates a message consumer for the topic that the sender has published the message to. The message consumer listens for messages on the topic.
    
3. Sender publishes the message: The sender publishes the message to the specific topic using a JMS publisher. The message is added to the end of the topic.
    
4. Receiver receives the message: The message consumer on each receiver side listens for messages on the topic. When a message is available on the topic, each message consumer retrieves it from the topic and sends it to the corresponding receiver.
    
5. Message acknowledgement: There is no automatic message acknowledgement in the pub-sub messaging model. The receiver can manually acknowledge the receipt of the message.


================
PRACTICALS
================

Example: To implement JMS, you will need a JMS provider such as Apache ActiveMQ,Apache ActiveMQ Artemis, IBM MQ, or RabbitMQ etc.

Apache ActiveMQ and Apache ActiveMQ Artemis are both open-source message brokers from the Apache Software Foundation, but they represent different generations of the technology. ActiveMQ Classic is the older, established broker, while ActiveMQ Artemis is a newer, re-architected version based on the HornetQ codebase



1. Download and install Apache ActiveMQ.
2. Create a Java project in your favorite IDE, and add the ActiveMQ library to your project’s classpath.
3. Create a connection factory object that will establish a connection to the ActiveMQ broker


=============================================================
How Spring Boot Integrates with JMS (Java Messaging Service)
=============================================================
Spring Boot provides easy integration with Java Messaging Service (JMS), allowing developers to build messaging systems with minimal configuration. 

JMS is a standard messaging API used to send messages between two or more clients, supporting asynchronous communication. 

JMS is commonly used in distributed systems for reliable communication between application components. It supports two primary messaging models:

1) Point-to-Point (Queues): Messages are sent to a specific queue, and one consumer processes each message.
2) Publish/Subscribe (Topics): Messages are broadcast to multiple subscribers.


MessageProducer --- sends    ----- Queue  ----- consumes --- MessageReceiver
(Client1)	    message			message

Spring Boot integrates JMS into applications by offering tools that make it easier to set up and manage messaging. Using Spring’s @JmsListener annotation and built-in configuration options, developers can focus on writing business logic while the framework handles much of the repetitive setup work.


===========================================
Setting Up JMS in a Spring Boot Application
===========================================
1. download and extract apache active MQ / Apache Active MQ Artemis
2. cmd> ActiveMQ start
3. in browser http://localhost:8161
 username: admin
 password: admin

4. Click on "Manage ActiveMQ broker" link
5. Queue (tab) > Create a new Queue with name : "ctsQueue"


1. create a new spring starter project for publisher
dependency: spring-boot-starter-ActiveMQ    -- artemis

. Connection Factory - the connection factory is the primary component for establishing a connection with the JMS broker. It abstracts the low-level networking and protocol handling required to connect to a broker like ActiveMQ.

-> The ConnectionFactory is responsible for creating Connection objects that allow the application to interact with the broker.
-> Each Connection spawns Session objects, which manage communication with the broker, including sending and receiving messages.
-> Spring Boot provides an out-of-the-box integration with ActiveMQConnectionFactory.

Default Configuration in application.properties

spring.activemq.broker-url=tcp://localhost:61616
spring.activemq.user=admin
spring.activemq.password=admin

#spring.artemis.mode=embedded


This configuration sets the broker URL and credentials for connecting to the ActiveMQ instance running locally on port 61616.


publisher -app

package com.cognizant.jms.publisher.services;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.jms.core.JmsTemplate;
import org.springframework.stereotype.Component;

@Component
public class MessageSender {

    private final JmsTemplate jmsTemplate;
    
    public MessageSender(JmsTemplate jmsTemplate) {
        this.jmsTemplate = jmsTemplate;
    }

    public void sendMessage(String destination, String message) {
        jmsTemplate.convertAndSend(destination, message);
        System.out.println("Sent message: " + message + " to " + destination);
    }
    
}



@SpringBootApplication
@EnableJms
public class PublisherApplication implements CommandLineRunner {
	@Autowired
	private MessageSender msgSender;

	public static void main(String[] args) {
		SpringApplication.run(PublisherApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {
		msgSender.sendMessage("ctsQueue", "Message from JMS Producer-3");
	}


}




-- subscriber app ---

spring.application.name=subscriber

spring.activemq.broker-url=tcp://localhost:61616
spring.activemq.user=admin
spring.activemq.password=admin


package com.cognizant.jms.subscriber;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.jms.annotation.EnableJms;
import org.springframework.jms.annotation.JmsListener;

@SpringBootApplication
@EnableJms
public class SubscriberApplication {

	public static void main(String[] args) {
		SpringApplication.run(SubscriberApplication.class, args);
	}

	@JmsListener(destination = "ctsQueue")
	public void receiveMessage(String msg) {
		System.out.println("Received <" + msg + ">");
	}
}


