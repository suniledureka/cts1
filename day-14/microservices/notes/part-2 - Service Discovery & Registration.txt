Service Discovery & Service Registration in Microservices
=========================================================

in a normal scenario - our 3 services (accounts, loans, cards) are being accessed by different clients (C1, C2, C3 etc)

but in a microservices scenario - 3 microservices will be placed in a microservice network and the external client can access it with external network using a single entry point to the microservice network and is known as Gateway / API Gateway/ Edge , which is capable of doing any checks related to (1) security (2) auditing (3) logging - all type of non-functional requirements we can perform at this single entry point

this single entry point is responsible to accept the external traffic 

sometimes one microservice may be dependent on the other microservice - like an external request comes to our accounts microservice through the API Gateway - now , in order to send the response to external application - my accounts microservice has to connect to loans microservice and cards microservice - this communication is termed as Internal communication. 

what ever communication is happening inside our microservice network is known as Internal communication

what are the challenges that we may face while our microservice trying to communicate with each other inside our microservice network

CHALLENGES

1) How do services locate each other microservices inside a network?
 - each instance of a microservice exposes a remote API with it's own host and port, how do other microservices & clients know about these dynamic endpoint URLs to invoke them. So where is my service?

2) How do new service instances enter into the network?
 - scaling scenario - a new instance
 - if a microservice instance fails, new instances will be brought online to ensure constant availability. This means that the IP addresses of the instances can be constantly changing. So how does these new instances can start serving to the clients?

3) Load Balance, Info sharing between Microservices instances
 - How do we make sure to properly load balance b/w the multiple microservice instances especially a microservice is invoking another microservice? How do a specific service information shared across the network?

These challenges in microservices can be solved using below concept or solutions
1) Service Registry
3) Service Registration
3) Load Balancing

=====================================================
Service Discovery & Registration inside microservices
=====================================================

whenever we develop cloud native application or microservice based applications, service discovery pattern is a perfect solutions.

service discovery pattern involves tracking and storing information about all running service instances in a service registry.

the purpose of service registry is - when a new instance is created, it should be registered in the registry, and whenever it gets terminated/ shutdown then it should be appropriately removed from the registry automatically

suppose if we started 5 instances of our accounts microservices - all of them needs to be registered inside the service registry and using the same registry my loans microservice can try to discover the accounts microservice related information.

how our microservice can register themselves to a service registry, and at the same time how my other microservices like loans microservice try to discover the details of service using the service registry

apart from service registry and service discovery the next challenge that we have is - "Load Balancing" - Load Balancing challenge is also addressed by this pattern

the service registry where it is going to maintain all the running instances - it acknowledges that multiple instances of the same application can be active simultaneously.  When a microservice want to communicate with a backing microservice, it performs a lookup in the registry to determine the IP address to connect to.
If multiple instances of a microservice is available, then behind the scene it is also going to perform the load-balancing strategy - using this eventually distribute the workload among the running instances of the microservice  

-> client-side service discovery
-> server-side service discovery - Kubernetis

How to solve the problem for cloud native applications?

Inside microservices network or cloud native applications we know that the IP addresses will be dynamically changing because we may change the number of instances whenever we want to perform autoscaling or in the scenarios of instance failures.

In these kind of dynamic situations  - microservices patterns like service discovery and registrations is a way for application and microservices to locate each other on a n/w.

what are the components involved in this pattern?
-> A central server (or servers) that maintain a global view of addresses - just like we have config server which is responsible to maintain all the configurations at a centralized location; similarly we create a central server which maintains the details of all the running service instances

how it is going to maintain is 
-> whenever a particular microservice instance is trying to get started at the very first time - it is the responsibility of the microservice itself to connect to the central server and to register their address when they start and ready - with that the central server will maintain the details in a service registry - 

-> once the microservice is started my central server also expects a regular heartbeats from my individual microservices confirming about their health

-> microservice that connect to the central server to deregister their address when they are about to shutdown

Summary: Service discovery & registrations deals with the problems about how microservices talk to each other ie perform API calls.


----------- How client side service discovery & Load Balancing Works ----------------

Service registry is in the same microservice network
Loans microservices -2 instances -- send regular heartbeat signals of their health to service registry

Accounts Microservice is the client microservice

Accounts microservice will forward the request to one of the loans microservice instance; based on its own load balancing strategy


----------- Spring Cloud support for Service Discovery & Registration ----------------

How can we implement client side service discovery inside our microservices network - Spring Cloud
Spring Cloud support for Client-side service discovery



https://spring.io > Projects > Spring Cloud > Spring Cloud Netflix - eureka server, spring cloud load balancer etc
	> Spring Cloud Open Feign - used for microservices communication - to communicate with other RESTAPIs like RestTemplate, WebClient etc


Netflix - is an OTT Platform  (Over-The-Top)
histroy in integration of name Netflix with Spring Boot - 
https://netflixtechblog.com/netflix-oss-and-spring-boot-coming-full-circle-4855947713a0




PRACTICALS
==========

----------- Setup Service Discovery agent using Eureka Server ----------------


a) New Spring Boot Starter Project - eurekaserver
Service Discovery agent for our CTS bank microservices
com.cognizant.eurekaserver
Dependencies: Eureka Server,  Actuator

b) on bootstrap class
@EnableEurekaServer    -- converting a normal spring boot project to act as a service discovery agent with the help of eureka libraries present in the Spring Cloud Netflix project


c) in application.properties

server.port=8761
eureka.instance.hostname=localhost
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false

fetchRegistry -> --- we don't want our eureka server to fetch the registry details of other microservices - eureka server never call the microservices 
registerWithEureka: false  --> don't register with yourself

---> Run As > Spring Boot Application
---> http://localhost:8761/    ----> shows eureka dashboard



d) accounts microservice
new dependency :Eureka Discovery Client

application.yml

server.port: 8080
spring.application.name: accounts

eureka.instance.preferIpAddress: true
eureka.instance.prefer-ip-address: true
eureka.client.fetchRegistry: true
eureka.client.registerWithEureka: true
eureka.client.serviceUrl.defaultZone: http://localhost:8761/eureka/

preferIpAddress --> whenever accounts microservice is trying to register with eureka server -by default it will try to register with hostname; hostnames will make sense whenever you are trying to use DNS mappings inside your microservices network 
  -- accounts microservice will register with eureka server by using the IP address

serviceUrl.defaultZone --> to configure multiple Eureka Servers from Client in Spring Cloud , separate with ,



application.yml

eureka:
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
  instance:
    prefer-ip-address: true



info:
  app:
    name: "accounts"
    description: "CTS Bank Accounts Application"
    version: "1.0.0"

the purpose of giving "info" element is - the same information we can see inside eureka dashboard

management.endpoints.web.exposure.include: "*"
management.endpoint.shutdown.enabled: true
management.info.env.enabled: true

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    shutdown:
      enabled: true
  info:
    env:
      enabled: true     


start accounts ms

http://localhost:8761/

GET  http://localhost:8761/eureka/apps/accounts


----------- Make codes changes in Loans & Cards microservice to connect to Eureka Server ----------------

GET  http://localhost:8761/eureka/apps/loans
GET  http://localhost:8761/eureka/apps/cards

----------- De-registration from Eureka server when microservices shutdown ----------------

management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    shutdown:
      enabled: true
  info:
    env:
      enabled: true




POSTMAN - POST --> http://localhost:8080/actuator/shutdown
check in logs of eurekaserver console
check in eureka dashboard



----------- Heartbeats mechanism to Eureka server from clients ----------------

start config server, eureka server, accounts, loans & cards

stop eureka server and check the logs of other microservices - we can see error messages for every 30 seconds -- search for "heartbeat"



----------- Feign Client code changes to invoke other microservices  ----------------

Feign Client ---> Declarative REST Client. 

OpenFeign creates a dynamic implementation of an interface decorated with JAX-RS or Spring MVC annotations.


Task: create a new REST API inside the accounts microservice to accumulate account related information, loans related information and cards related information based upon a given mobile number and it should consolidate all the responses from the other microservices like loans & cards along with the a/c related data. 

At present account microservice is not having any information about cards and loans - so it has to connect with the cards & loans microservice to get the data 

to establish the internal connect b/w the microservices - we need to use Open Feign client library or even we can use RestTemplate , WebClient

refer: RestTemplate Vs FeignClient Vs WebClient



== PRACTICALS ====
--accounts microservice ---
1. new dependency: OpenFeign (spring-cloud-starter-openfeign)

2. on bootstrap class  - @EnableFeignClients  --> enables Feign client related functionalities inside our accounts microservice - so that accounts microservice can connect with other microservices - Scans for interfaces that declare they are feign clients

3. in-order to connect with Loans & cards microservices in a traditional approach -we can use RestTemplate , WebClient and we pass the URL, request data, port number etc with the RestTemplate or WebClient 

when we use the OpenFeign client - we don't need to write the implementation code - we just have to write the declarative code (something like the approach that we used in Data JPA - not writing any implementation code - only declarative code)

4. # create client interface  - to help the account microservice to connect with the cards microservice

package com.cognizant.accounts.service.client;

@FeignClient("cards")  --> to use the openfeign libraries - name used to register cards microservice with eureka server
public interface CardsFeignClient {

    @GetMapping(value = "/api/fetch", consumes = "application/json")
    public ResponseEntity<CardsDto> fetchCardDetails(@RequestParam String mobileNumber); //should match with the cards microservice
}

copy the CardsDto and LoansDto from the respective microservices  and place it in accounts microservice "dto" package


-- behind the scenes - our CardsFeignClient will connect to the Eureka Server and try to fetch all the instances that are registered with the logical name "cards" - once it gets the instance information - it will cache those details for 30 seconds which is the default period and within 30 seconds it is not going to connect again with eureka server; instead it is going to leverage the details present in the cache. 

Based upon the IP details in the cache - it is going to invoke the api "/api/fetch" along with mobileNumber of Cards microservice 

-- all the implementation codes will be generated by OpenFeign client

---- create a similar feign client for loans microservice


------------------- LoansFeignClient.java ------------------

package com.cognizant.accounts.service.client;

@FeignClient("loans")
public interface LoansFeignClient {
    @GetMapping(value = "/api/fetch",consumes = "application/json")
    public ResponseEntity<LoansDto> fetchLoanDetails(@RequestParam String mobileNumber);
}



5. --> create a new DTO class for sending response of account , customer, loans and cards details - CustomerDetailsDto - to hold all details

-------------- CustomerDetailsDto.java -----------------

package com.cognizant.accounts.dto;

@Data
public class CustomerDetailsDto {		---> take the details from CustomerDto
 private String name;
 private String email;
 private String mobileNumber;
 private AccountsDto accountsDto;

 private CardsDto cardsDto;
 private LoansDto loansDto;
}


--> create a new Controller -- CustomerController

package com.cognizant.accounts.controllers

@RestController
@RequestMapping(path="/api", produces = {MediaType.APPLICATION_JSON_VALUE})
@Validated
public class CustomerController {
    @GetMapping("/fetchCustomerDetails")
    public ResponseEntity<CustomerDetailsDto> fetchCustomerDetails(@RequestParam @Pattern(regexp="(^$|[0-9]{10})",message = "Mobile number must be 10 digits") String mobileNumber){
      return null;
    }
}


# create an interface in service package

package com.cognizant.accounts.service;	
public interface ICustomersService {
    CustomerDetailsDto fetchCustomerDetails(String mobileNumber);
}


# implementation class

@Service
@AllArgsConstructor
public class CustomersServiceImpl implements ICustomersService {

    private AccountsRepository accountsRepository;
    private CustomerRepository customerRepository;

    private CardsFeignClient cardsFeignClient;
    private LoansFeignClient loansFeignClient;

    @Override
    public CustomerDetailsDto fetchCustomerDetails(String mobileNumber) {   //refer AccountsServiceImpl
        Customer customer = customerRepository.findByMobileNumber(mobileNumber).orElseThrow(
                () -> new ResourceNotFoundException("Customer", "mobileNumber", mobileNumber)
        );
        Accounts accounts = accountsRepository.findByCustomerId(customer.getCustomerId()).orElseThrow(
                () -> new ResourceNotFoundException("Account", "customerId", customer.getCustomerId().toString())
        );

        CustomerDetailsDto customerDetailsDto = CustomerMapper.mapToCustomerDetailsDto(customer, new CustomerDetailsDto());
        customerDetailsDto.setAccountsDto(AccountsMapper.mapToAccountsDto(accounts, new AccountsDto()));

        ResponseEntity<LoansDto> loansDtoResponseEntity = loansFeignClient.fetchLoanDetails(mobileNumber);
        customerDetailsDto.setLoansDto(loansDtoResponseEntity.getBody());

        ResponseEntity<CardsDto> cardsDtoResponseEntity = cardsFeignClient.fetchCardDetails(mobileNumber);
        customerDetailsDto.setCardsDto(cardsDtoResponseEntity.getBody());

        return customerDetailsDto;
    }
}

--- inside CustomerMapper class
    public static CustomerDetailsDto mapToCustomerDetailsDto(Customer customer, CustomerDetailsDto customerDetailsDto) {
        customerDetailsDto.setName(customer.getName());
        customerDetailsDto.setEmail(customer.getEmail());
        customerDetailsDto.setMobileNumber(customer.getMobileNumber());
        return customerDetailsDto;
    }



-- in Controller class
package com.cognizant.accounts.controllers

@RestController
@RequestMapping(path="/api", produces = {MediaType.APPLICATION_JSON_VALUE})
@Validated
public class CustomerController {
    private final ICustomersService iCustomersService;
   
    public CustomerController(ICustomersService iCustomersService){
        this.iCustomersService = iCustomersService;
    }

    @GetMapping("/fetchCustomerDetails")
    public ResponseEntity<CustomerDetailsDto> fetchCustomerDetails(@RequestParam
                                                                   @Pattern(regexp="(^$|[0-9]{10})",message = "Mobile number must be 10 digits") String mobileNumber){
      CustomerDetailsDto customerDetailsDto = iCustomersService.fetchCustomerDetails(mobileNumber);
      return ResponseEntity.status(HttpStatus.OK).body(customerDetailsDto);
    }
}


start eureka server, accounts, cards & loans ms

check in eureka dashboard

POST - http://localhost:8080/api/create
POST - http://localhost:9000/api/create?mobileNumber=xxxx    use the same mobile number
POST - http://localhost:8090/api/create?mobileNumber=xxxx    use the same mobile number

GET - http://localhost:8080/api/fetchCustomerDetails?mobileNumber=xxxx    

we have used to logic name of microservice - not IP address to invoke the other ms 
it will go and check in the service registry agent (eureka) - and will get the complete details of the "cards" / "loans" ms



---------------- Eureka Self-Preservation mode to avoid Traps in Network Issues ----------------------------

In a normal working microservice network eureka server will expect heartbeat from the microservice instances which are registered with it; for some reason if eureka server does not receive heartbeat from a particular microservice instance within a certain time frame then it assumes that the instance has become un-responsive, or crashed or it became unhealthy - so based upon this assumption - eureka server is going to delete the details of that particular instance from the service registry details; so that it cannot be discovered by the other microservices. 

It helps eureka server to maintain an up-to-date view of the registered service instances 

sometimes network issue may happen - network may not work for few seconds or minutes 




