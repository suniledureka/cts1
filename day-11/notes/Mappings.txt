Object Relational Mapping with Spring Boot
==========================================
-> how to work with relationships between entities in Spring Data

1) One-to-One Relationship
2) One-to-Many Relationship
3) Many-to-Many Relationship

Spring Boot is built on the top of the spring and contains all the features of spring.
 
Spring also provides JPA and hibernate to increase the data manipulation efficiency between the spring application and the database. 

In very simple terms we can say JPA (Java persistence API) is like an interface and the hibernate is the implementation of the methods of the interface- like how insertion will be down is already defined with the help of hibernate.


Fetch Types in Hibernate
------------------------
EAGER - Load the associated data of the other entity, before-hand which is bit costly.
LAZY - Load the associated data of the other entity, only when requested. This is done on demand.

Example: If we have a relationship between university and student, when university data is fetched, we don't want to fetch students. Because, one university will have thousands of students in the students array in the mapping. It will be a very costly operation. So, we can tell hibernate to keep it with LAZY initialization.


Cascading in Hibernate - 
----------------------
Cascading in Hibernate refers to the automatic persistence of related entities. When a change is made to an entity, such as an update or deletion, the changes can be cascaded to related entities as well. 
Cascading in JPA coordinates actions between interconnected entities

For example, if you have a Customer entity that has a one-to-many relationship with an Order entity, you can define cascading to specify that when a Customer is deleted, all of their orders should be deleted as well.

When a change is made to an entity, such as an update or deletion, the changes can be cascaded to related entities as well. Cascading can be configured using annotations, such as @OneToMany(cascade = CascadeType.ALL), or through XML configuration files. It is important to use cascading carefully, as it can lead to unwanted changes being made to related entities if not configured properly.

Hibernate provides several types of cascade options that can be used to manage the relationships between entities.

Here are the different cascade types in Hibernate:

-> CascadeType.ALL
-> CascadeType.PERSIST
-> CascadeType.MERGE
-> CascadeType.REMOVE
-> CascadeType.REFRESH
-> CascadeType.DETACH
-> CascadeType.REPLICATE
-> CascadeType.SAVE_UPDATE

CascadeType.PERSIST : Both save() or persist() operations cascade to related entities.
CascadeType.MERGE : Related entities are merged when the ownership entity is merged.
CascadeType.REFRESH : Does same thing for the refresh() operation.
CascadeType.REMOVE : Removes all related entities association with this setting when the ownership entity is deleted.
CascadeType.DETACH : Detaches all related entities if a "manual detach" occurs.
CascadeType.ALL : All of the above cascade operations.

There is NO DEFAULT CASCADE TYPE in JPA. By default, no operation is cascaded. If we want, we can use several cascade types at once also.

cascade = { CascadeType.PERSIST, CascadeType.MERGE, CascadeType.DETACH, CascadeType.REFRESH }


1. CascadeType.ALL  --> is a cascading type in Hibernate that specifies that all state transitions (create, update, delete, and refresh) should be cascaded from the parent entity to the child entities. This means that if you persist, update, or delete a parent entity, all child entities associated with it will also be persisted, updated, or deleted accordingly.

@OneToMany(mappedBy="customer", cascade=CascadeType.ALL) 
private Set<Order> orders;

This code defines a one-to-many relationship between a Customer entity and an Order entity and specifies that all state transitions should be cascaded to the associated orders. This means that when a Customer entity is saved, updated, or deleted, all of its associated Order entities will also be saved, updated, or deleted accordingly.

2. CascadeType.PERSIST --> is a cascading type in Hibernate that specifies that the create (or persist) operation should be cascaded from the parent entity to the child entities.
For example, consider a scenario where you have a Customer entity with a one-to-many relationship to Order entities. By using CascadeType.PERSIST, any new Order entities associated with a Customer entity will be persisted when the Customer entity is persisted. However, if you update or delete a Customer entity, any associated Order entities will NOT be automatically updated or deleted


@OneToMany(mappedBy="customer", cascade=CascadeType.PERSIST) 
private Set<Order> orders;

This code defines a one-to-many relationship between a Customer entity and an Order entity and specifies that the persistent operation should be cascaded to the associated orders. This means that when a Customer entity is persisted, any new Order entities associated with it will also be persisted automatically. However, updates or deletions made to the Customer entity will not be cascaded to the associated Order entities.

CascadeType.MERGE --> is a cascading type in Hibernate that specifies that the update (or merge) operation should be cascaded from the parent entity to the child entities.

When CascadeType.MERGE is used, any changes made to a detached parent entity (i.e., an entity that is not currently managed by the persistence context) will be automatically merged with its associated child entities when the parent entity is merged back into the persistence context. However, new child entities that are not already associated with the parent entity will not be automatically persisted.
For example, consider a scenario where you have a Customer entity with a one-to-many relationship to Order entities. By using CascadeType.MERGE, any changes made to a detached Customer entity (such as changes made in a different session or transaction) will be automatically merged with its associated Order entities when the Customer entity is merged back into the persistence context.


@OneToMany(mappedBy="customer", cascade=CascadeType.MERGE) 
private Set<Order> orders;

This code defines a one-to-many relationship between a Customer entity and an Order entity and specifies that the merge operation should be cascaded to the associated orders. This means that when a detached Customer entity is merged back into the persistence context, any changes made to the Customer entity will be automatically merged with its associated Order entities. However, new Order entities that are not already associated with the Customer entity will not be automatically persisted.

4. CascadeType.REMOVE --> is a cascading type in Hibernate that specifies that the delete operation should be cascaded from the parent entity to the child entities.

When CascadeType.REMOVE is used, any child entities associated with a parent entity will be automatically deleted when the parent entity is deleted. However, updates or modifications made to the parent entity will not be cascaded to the child entities.

For example, consider a scenario where you have a Customer entity with a one-to-many relationship to Order entities. By using CascadeType.REMOVE, any Order entities associated with a Customer entity will be automatically deleted when the Customer entity is deleted.


@OneToMany(mappedBy="customer", cascade=CascadeType.REMOVE) 
private Set<Order> orders;

This code defines a one-to-many relationship between a Customer entity and an Order entity and specifies that the remove operation should be cascaded to the associated orders. This means that when a Customer entity is deleted, any associated Order entities will also be deleted automatically. However, updates or modifications made to the Customer entity will not be cascaded to the associated Order entities.

5. CascadeType.REFRESH --> is a cascading type in Hibernate that specifies that the refresh operation should be cascaded from the parent entity to the child entities.

When CascadeType.REFRESH is used, any child entities associated with a parent entity will be automatically refreshed when the parent entity is refreshed. This means that the latest state of the child entities will be loaded from the database and any changes made to the child entities will be discarded.

For example, consider a scenario where you have a Customer entity with a one-to-many relationship to Order entities. By using CascadeType.REFRESH, any associated Order entities will be automatically refreshed when the Customer entity is refreshed.


@OneToMany(mappedBy="customer", cascade=CascadeType.REFRESH) 
private Set<Order> orders;

This code defines a one-to-many relationship between a Customer entity and an Order entity and specifies that the refresh operation should be cascaded to the associated orders. This means that when a Customer entity is refreshed, any associated Order entities will also be refreshed automatically. Any changes made to the Order entities will be discarded, and the latest state of the Order entities will be loaded from the database.

6. CascadeType.DETACH --> is a cascading type in Hibernate that specifies that the detach operation should be cascaded from the parent entity to the child entities.

When CascadeType.DETACH is used, any child entities associated with a parent entity will be automatically detached when the parent entity is detached. This means that the child entities will become detached from the persistence context and their state will no longer be managed by Hibernate.

For example, consider a scenario where you have a Customer entity with a one-to-many relationship to Order entities. By using CascadeType.DETACH, any associated Order entities will be automatically detached when the Customer entity is detached.


@OneToMany(mappedBy="customer", cascade=CascadeType.DETACH) 
private Set<Order> orders;

7. CascadeType.REPLICATE -->  is a cascading type in Hibernate that specifies that the replicate operation should be cascaded from the parent entity to the child entities.

For example, consider a scenario where you have a Customer entity with a one-to-many relationship to Order entities. By using CascadeType.REPLICATE, any associated Order entities will be automatically replicated when the Customer entity is replicated.


@OneToMany(mappedBy="customer", cascade=CascadeType.REPLICATE) 
private Set<Order> orders;

This code defines a one-to-many relationship between a Customer entity and an Order entity and specifies that the replicate operation should be cascaded to the associated orders. This means that when a Customer entity is replicated, new Order entities will be created and persisted in the database with the same state as the original Order entities. However, any changes made to the original Order entities after the replication operation will not be replicated to the new Order entities.


8. CascadeType.SAVE_UPDATE --> is a cascading type in Hibernate that specifies that the save or update operation should be cascaded from the parent entity to the child entities.

For example, consider a scenario where you have a Customer entity with a one-to-many relationship to Order entities. By using CascadeType.SAVE_UPDATE, any associated Order entities will be automatically saved or updated when the Customer entity is saved or updated.


@OneToMany(mappedBy="customer", cascade=CascadeType.SAVE_UPDATE) 
private Set<Order> orders;


-------------------- PRACTICALS ---> One-To-One Mapping ------------

Usecase : relationship between Employee and Address
An Employee should have an Address
Two Employees should not have the same Address

In a one to one mapping, both entities are tightly coupled. 
After the Employee is removed, we cannot use his/her Address. So we should define CascadeType as ALL(If you want to keep the Address, change it to PERSIST). Then address won't be deleted even we delete the Employee. 
Since Hibernate decides FetchType for one to one mapping is EAGER by default

Normally we record child entity primary key as the foreign key of the owner entity. So Employee should have a column in the table to record the address ID. We will give its name as "ADDRESS_ID" and its referenced by "ID" column in Address entity.

------ application.properties --------
# Datasource properties
spring.datasource.url=jdbc:mysql://localhost:3306/db_cognizant
spring.datasource.username=root
spring.datasource.password=root
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# ORM Properties
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.hibernate.ddl-auto=update

------ Employee.java ------
package com.cognizant.mappings.oto.entity;
@Entity
@Data
public class Employee {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	private String employeeName;

	@OneToOne(cascade = CascadeType.ALL)
	@JoinColumn(name = "address_id", referencedColumnName = "id")
	private Address employeeAddress;
}

------ Address.java --------
package com.modeln.mappings.oto.entity;
@Entity
@Data
public class Address {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	private String street;
	private String city;
	private String state;
}

------- EmployeeRepository.java -----------
package com.modeln.mappings.oto.repositories;
public interface EmployeeRepository extends JpaRepository<Employee, Long> {}

------- AddressRepository.java ------------
package com.modeln.mappings.oto.repositories;
public interface AddressRepository extends JpaRepository<Address, Long> {}

------- EmployeeAddressService ------------
package com.modeln.mappings.oto.services;
@Service
public class EmployeeAddressServices {
	@Autowired
	private EmployeeRepository employeeRepo;
	
	public void saveEmployeeAddress(Employee emp) {
		employeeRepo.save(emp);
	}

}

------- Application.java -------------
@SpringBootApplication
public class Application {	
	private EmployeeRepository employeeRepo;
	private AddressRepository addressRepo;
	
	
	public SbDataOtoApplication(EmployeeRepository employeeRep, AddressRepository addressRepo) {
		super();
		this.employeeRepo = employeeRep;
		this.addressRepo = addressRepo;
	}

	public static void main(String[] args) {
		SpringApplication.run(SbDataOtoApplication.class, args);
	}

	@Override
	public void run(String... args) throws Exception {
		Address addr = new Address();
		addr.setStreet("Gachibowli");
		addr.setCity("Hyderabad");
		addr.setState("Telangana");
		
		Employee emp = new Employee();
		emp.setEmployeeName("Sanjay Patil");
		emp.setEmployeeAddress(addr);
		
		employeeRepo.save(emp);
		
		Optional<Employee> optEmp = employeeRepo.findById(1);
		boolean isPresent = optEmp.isPresent();
		if(isPresent) {
			emp = optEmp.get();
			System.out.println(emp.getEmployeeId() + " - " + emp.getEmployeeName());
			System.out.println(emp.getEmployeeAddress().getAdddressId()+" - "+ emp.getEmployeeAddress().getStreet());
			
			System.out.println(emp);
		}
		
		employeeRepo.deleteById(1);
	}
}


----- another approach -----

		
	public static void main(String[] args) {
		ApplicationContext context = SpringApplication.run(Application.class, args);
		  Employee emp = new Employee(); 
		  emp.setEmloyeeName("Sanjay Patil");
		  
		  Address addr = new Address(); 
		  addr.setStreet("Mothinagar");
		  addr.setCity("Hyderabad"); 
		  addr.setState("Telangana");		  
		  
		  emp.setEmployeeAddress(addr);
		  
		  EmployeeAddressServices service = context.getBean(EmployeeAddressServices.class);
		  service.saveEmployeeAddress(emp);
	}
}

alter table employee auto_increment 100;


------- lazy loading --------------------
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

@OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY)   [Employee entity class]







======================= to have a Bi directional one-to-one mapping  =======================
@Entity
@Data
public class Address {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	private String street;
	private String city;
	private String state;
	
	@OneToOne(mappedBy = "employeeAddress")	
	//@JsonIgnore
	private Employee employee;
}

In the child entity(Address), we just need to link the name of the property mapped in Employee entity.

"@JsonIgnore" annotation was placed there for user property since I do not need to have the user object to be seen in Address data. Just to ignore that field from JSON object.


----------- PRACTICALS # 2 -----------------------------
Person & Passport

package com.modeln.mappings.oto.entity;
@Entity
@Data
public class Person {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer personId;

	private String personName;

	private String personGender;

	@OneToOne(mappedBy = "person", cascade = CascadeType.ALL)
	private Passport passport;
}


package com.modeln.mappings.oto.entity;
@Entity
@Data
public class Passport {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Integer passportId;

	private String passPortNum;

	private LocalDate issuedDate;

	private LocalDate expDate;
	
	@OneToOne
	@JoinColumn(name = "person_id")
	private Person person;
}


PassportRepository & PersonRepository

package com.modeln.mappings.oto.services;
@Service
public class PersonServices {
	@Autowired
	private PersonRepository personRepo;
	@Autowired
	private PassportRepository passportRepo;
	
	public void saveData() {

		Person person = new Person();
		person.setPersonName("Praveen Kumar");
		person.setPersonGender("Male");

		Passport passport = new Passport();
		passport.setPassPortNum("RS12387");
		passport.setIssuedDate(LocalDate.now());
		passport.setExpDate(LocalDate.now().plusYears(10));

		person.setPassport(passport);
		passport.setPerson(person);

		personRepo.save(person);

	}
	
	public void deleteById(int id) {
		personRepo.deleteById(id);
	}
	
	public void searchByPassPortId(int id) {
		Passport pass = passportRepo.findById(id).get();
		System.out.println(pass.getPassPortNum());
	}
}

@SpringBootApplication
public class Application {	
		
	public static void main(String[] args) {
		ConfigurableApplicationContext context = SpringApplication.run(Application.class, args);
		
		PersonServices personService = context.getBean(PersonServices.class);
		
		//personService.saveData();
		//personService.deleteById(1);
		personService.searchByPassPortId(4);
	}
}



@JsonManagedReference annotation for the first objects instantiated

@JsonBackReference annotation for the second objects instantiated



-------------------------- One-To-Many Mappings ------------------------------------

The one-to-many mapping means that one row in a table is mapped to multiple rows in another table.

We will implement one-to-many unidirectional mapping using @OneToMany and @JoinColumn JPA annotations.

define a one-to-many unidirectional mapping between two entities using JPA and Hibernate.

Example : Posts & Comments

@Entity
@Table(name = "posts")
@Data
public class Post {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;

	@Column(name = "title")
	private String title;

	@Column(name = "description")
	private String description;

	@OneToMany(cascade = CascadeType.ALL)
	@JoinColumn(name = "pc_fid", referencedColumnName = "id")
	List<Comment> comments = new ArrayList<>();

	public Post(String title, String description) {
		super();
		this.title = title;
		this.description = description;
	}
}


@Entity
@Data
@Table(name = "comments")
public class Comment {
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private long id;
	private String text;
	
	public Comment(String text) {
		this.text=text;
	}
}


Respositories

@SpringBootApplication
public class Application implements CommandLineRunner{	
	@Autowired
    private PostRepository postRepository;
	
	public static void main(String[] args) {
		SpringApplication.run(Application.class, args);		
	}

	@Override
	public void run(String... args) throws Exception {
	Post post = new Post("one to many mapping", "one to many mapping using JPA and hibernate");

        Comment comment1 = new Comment("Very useful");
        Comment comment2 = new Comment("informative");
        Comment comment3 = new Comment("Great post");

        post.getComments().add(comment1);
        post.getComments().add(comment2);
        post.getComments().add(comment3);

        this.postRepository.save(post);
		
	}
}


-------------- Example -2 Employee & Addresses ----------------------
@Entity
public class Employee {
 @Id
 @GeneratedValue(strategy = GenerationType.IDENTITY)
 private Integer empId;

 private String empName;

 private Double salary;

 @OneToMany(mappedBy = "emp", cascade = CascadeType.ALL)
 private List<Address> addr;
}


@Entity
public class Address {
 @Id
 @GeneratedValue(strategy = GenerationType.IDENTITY)
 private Integer addrId;

 private String city;

 private String state;

 private String type;

 @ManyToOne
 @JoinColumn(name = "emp_id")
 private Employee emp;
}


@Service
public class EmployeeService {
 @Autowired
 private EmpRepo empRepo;

 @Autowired
 private AddressRepo addrRepo;

 public void deleteEmp() {
  empRepo.deleteById(1);
 }

 public void getAddrData() {
  Optional<Address> findById = addrRepo.findById(1);
 }

 public void getEmpData() {
   Optional<Employee> findById = empRepo.findById(1);
 }

 public void saveEmpData() {
  Employee emp = new Employee();
  emp.setEmpName("John");
  emp.setSalary(1000.00);
  
  Address a1 = new Address();
  a1.setCity("Hyd");
  a1.setState("TG");
  a1.setType("Present");
  a1.setEmp(emp); // setting emp to addr

  Address a2 = new Address();
  a2.setCity("GNT");
  a2.setState("AP");
  a2.setType("Permanent");
  a2.setEmp(emp); // setting emp to addr

  List<Address> addrList = Arrays.asList(a1, a2);
  emp.setAddr(addrList); // setting addr list to emp

  empRepo.save(emp);

}
}


---------- Spring Boot Hibernate Many to Many Example  ----------------------
In many-to-many association, the source entity has a field that stores a collection of target entities. The @ManyToMany JPA annotation is used to link the source entity with the target entity.

A many-to-many association always uses an intermediate join table to store the association that joins two entities. The join table is defined using the @JoinTable JPA annotation.

Example:
 employees (table)
employee_id
first_name
last_name

 projects (table)
project_id
project_title

 employees_projects (table) 
emloyee_id
project_id

@Entity
@Table(name = "employees")
public class Employee extends AuditModel {

    private static final long serialVersionUID = 1 L;

    @Id
    @Column(name = "employee_id")
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long employeeId;

    @Column(name = "first_name")
    private String firstName;

    @Column(name = "last_name")
    private String lastName;

    @ManyToMany(cascade = {
        CascadeType.ALL
    })
    @JoinTable(
        name = "employees_projects",
        joinColumns = {
            @JoinColumn(name = "employee_id")
        },
        inverseJoinColumns = {
            @JoinColumn(name = "project_id")
        }
    )
    Set < Project > projects = new HashSet < Project > ();
}


@Entity
@Table(name = "projects")
public class Project extends AuditModel {

 private static final long serialVersionUID = 1L;

 @Id
    @Column(name = "project_id")
    @GeneratedValue
    private Long projectId;

    @Column(name = "title")
    private String title;

    @ManyToMany(mappedBy = "projects", cascade = { CascadeType.ALL })
    private Set<Employee> employees = new HashSet<Employee>();
}


public interface EmployeeRepository extends JpaRepository<Employee, Long>{

public interface ProjectRepository extends JpaRepository<Project, Long>{



=====================================================================================
Spring Boot Application with REST APIs

Student - Adddress - Subject

Student <---- OTO -----> Address
Student <---- OTM -----> Subject


public class Address {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id")
	private Long id;

	@Column(name = "street")
	private String street;

	@Column(name = "city")
	private String city;
	
	@OneToOne(mappedBy = "address")
	private Student student;
}

public class Student {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id")
	private Long id;
	
	@Column(name = "first_name")
	private String firstName;
	
	@Column(name = "last_name")
	private String lastName;
	
	@Column(name = "email")
	private String email;
	
	@OneToOne
	@JoinColumn(name = "address_id")
	private Address address;
	
	@OneToMany(mappedBy = "student")
	private List<Subject> learningSubjects;
	
	public Student (StudentRequest createStudentRequest) {
		this.firstName = createStudentRequest.getFirstName();
		this.lastName = createStudentRequest.getLastName();
		this.email = createStudentRequest.getEmail();
	}
}

@Entity
@Table(name = "subject")
@Data
public class Subject {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id")
	private Long id;
	
	@Column(name = "subject_name")
	private String subjectName;
	
	@Column(name = "marks_obtained")
	private Double marksObtained;
	
	@ManyToOne
	@JoinColumn(name = "student_id")
	private Student student;
}


@Data
public class StudentRequest {

	//@JsonProperty("first_name")
	@NotBlank(message = "First name is required")
	private String firstName;

	private String lastName;

	private String email;

	private String street;

	private String city;

	private List<SubjectRequest> subjectsLearning;

}


@Data
public class StudentResponse {
	private long id;

	@JsonProperty("first_name")
	private String firstName;

	private String lastName;

	private String email;
	
	private String street;

	private String city;
	
	private List<SubjectResponse> learningSubjects;
	
	public StudentResponse (Student student) {
		this.id = student.getId();
		this.firstName = student.getFirstName();
		this.lastName = student.getLastName();
		this.email = student.getEmail();
		
		this.street = student.getAddress().getStreet();
		this.city = student.getAddress().getCity();
		
		if (student.getLearningSubjects() != null) {
			learningSubjects = new ArrayList<SubjectResponse>();
			for (Subject subject: student.getLearningSubjects()) {
				learningSubjects.add(new SubjectResponse(subject));
			}
		}
	}
}


@Data
public class SubjectRequest {
	private String subjectName;

	private Double marksObtained;
}

@Data
public class SubjectResponse {

	private Long id;
	
	private String subjectName;

	private Double marksObtained;
	
	public SubjectResponse (Subject subject) {
		this.id = subject.getId();
		this.subjectName = subject.getSubjectName();
		this.marksObtained = subject.getMarksObtained();
	}
}


@Repository
public interface AddressRepository extends JpaRepository<Address, Long> {

}

StudentRepository
SubjectRepository


@Service
public class StudentService {

	@Autowired
	StudentRepository studentRepository;
	
	@Autowired
	AddressRepository addressRepository;
	
	@Autowired
	SubjectRepository subjectRepository;
	
	public List<Student> getAllStudents () {
		return studentRepository.findAll();
	}
	
	public String getFirstNameById (long id) {
		return studentRepository.findById(id).get().getFirstName();
	}
	
	public String getLastNameById (long id) {
		return studentRepository.findById(id).get().getLastName();
	}
	
	public Student createStudent (StudentRequest studentRequest) {
		Student student = new Student();
		student.setFirstName(studentRequest.getFirstName());
		student.setLastName(studentRequest.getLastName());
		student.setEmail(studentRequest.getEmail());
		
		Address address = new Address();
		address.setStreet(studentRequest.getStreet());
		address.setCity(studentRequest.getCity());
		
		address = addressRepository.save(address);
		
		student.setAddress(address);
		student = studentRepository.save(student);
		
		List<Subject> subjectsList = new ArrayList<Subject>();
		
		if(studentRequest.getSubjectsLearning() != null) {
			for (SubjectRequest subjectRequest : studentRequest.getSubjectsLearning()) {
				Subject subject = new Subject();
				subject.setSubjectName(subjectRequest.getSubjectName());
				subject.setMarksObtained(subjectRequest.getMarksObtained());
				subject.setStudent(student);
				
				subjectsList.add(subject);
			}
			
			subjectRepository.saveAll(subjectsList);
			
		}
		
		student.setLearningSubjects(subjectsList);
		
		return student;
	}
	
}



@RestController
@RequestMapping("/api/student/")
public class StudentController {

	@Autowired
	StudentService studentService;
	
	@GetMapping("getAll")
	public List<StudentResponse> getAllStudents () {
		List<Student> studentList = studentService.getAllStudents();
		List<StudentResponse> studentResponseList = new ArrayList<StudentResponse>();
		
		studentList.stream().forEach(student -> {
			studentResponseList.add(new StudentResponse(student));
		});
		
		return studentResponseList;
	}
	
	@GetMapping("getFirstNameById/{id}")
	public String getFirstNameById (@PathVariable long id) {
		return studentService.getFirstNameById(id);
	}
	
	@GetMapping("getLastNameById/{id}")
	public String getLastNameById (@PathVariable long id) {
		return studentService.getLastNameById(id);
	}
	
	@PostMapping("create")
	public StudentResponse createStudent (@Valid @RequestBody StudentRequest studentRequest) {
		Student student = studentService.createStudent(studentRequest);
		
		return new StudentResponse(student);
	}
}



CREATE TABLE address (
  id int(11) NOT NULL AUTO_INCREMENT,
  street varchar(100) NOT NULL,
  city varchar(45) NOT NULL,
  PRIMARY KEY (id)) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;

INSERT INTO address VALUES (1,'Banjara Hills','Hyderabad'),(2,'Jubilee Hills','Hyderabad'),(3,'Ameerpet','Hyderabad'),(4,'Panjagutta','Hyderabad');


CREATE TABLE subject (
  id int(11) NOT NULL AUTO_INCREMENT,
  subject_name varchar(45) DEFAULT NULL,
  marks_obtained double DEFAULT NULL,
  student_id int(11) DEFAULT NULL,
  PRIMARY KEY (id),
  KEY student_id (student_id),
  CONSTRAINT subject_ibfk_1 FOREIGN KEY (student_id) REFERENCES student (id)) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=latin1;


INSERT INTO subject VALUES (1,'Java',80,1),(2,'MySQL',70,1),(3,'Java',80,2),(4,'MySQL',70,2),(5,'MongoDB',70,2),(6,'MySQL',70,3),(7,'MongoDB',70,3),(8,'Java',60,4),(9,'MongoDB',50,4);

CREATE TABLE student (
  id int(11) NOT NULL AUTO_INCREMENT,
  first_name varchar(50) NOT NULL,
  last_name varchar(50) DEFAULT NULL,
  email varchar(30) DEFAULT NULL,
  address_id int(11) DEFAULT NULL,
  PRIMARY KEY (id)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=latin1;

INSERT INTO student VALUES (1,'John','Smith','john@gmail.com',1),(2,'Virat','Dave','virat@gmail.com',2),(3,'Steve','Martin','steve@gmail.com',3),(4,'Sachin','Kumar','sachin@gmail.com',4);


INSERT INTO address VALUES (1,'Banjara Hills','Hyderabad'),(2,'Jubilee Hills','Hyderabad'),(3,'Ameerpet','Hyderabad'),(4,'Panjagutta','Hyderabad');

INSERT INTO student VALUES (1,'John','Smith','john@gmail.com',1),(2,'Virat','Dave','virat@gmail.com',2),(3,'Steve','Martin','steve@gmail.com',3),(4,'Sachin','Kumar','sachin@gmail.com',4);
INSERT INTO subject VALUES (1,80,'Java',1),(2,70,'MySQL',1),(3,80,'Java',2),(4,70,'MySQL',2),(5,70,'MongoDB',2),(6,75,'MySQL',3),(7,73,'MongoDB',3),(8,65,'Java',4),(9,58,'MongoDB',4);




POST Request  -- /create

{
 "firstName":"Sunil",
 "lastName":"Joseph",
 "email":"sunil@gmail.com",
 "street":"Mothinagar",
 "city":"Hyderabad",
 "subjectsLearning":[
		{
		 "subjectName":"Computers", 
		 "marksObtained":100},
		{
		 "subjectName":"Physics", 
		 "marksObtained":100
		}]
}
